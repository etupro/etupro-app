alter table "public"."sapristi_informations"
  drop constraint "sapristi_informations_user_profile_id_fkey";

alter table "public"."sapristi_informations"
  drop constraint "sapristi_informations_user_profile_id_key";

alter table "public"."sapristi_informations"
  drop constraint "sapristi_informations_pkey";

drop index if exists "public"."sapristi_informations_user_profile_id_key";

drop index if exists "public"."sapristi_informations_pkey";

alter table "public"."sapristi_informations"
  drop column "user_profile_id";

alter table "public"."sapristi_informations"
  add column "id" bigint generated by default as identity not null;

alter table "public"."user_profiles"
  add column "sapristi_information_id" bigint;

CREATE UNIQUE INDEX sapristi_informations_id_key ON public.sapristi_informations USING btree (id);

CREATE UNIQUE INDEX user_profiles_sapristi_information_key ON public.user_profiles USING btree (sapristi_information_id);

CREATE UNIQUE INDEX sapristi_informations_pkey ON public.sapristi_informations USING btree (id);

alter table "public"."sapristi_informations"
  add constraint "sapristi_informations_pkey" PRIMARY KEY using index "sapristi_informations_pkey";

alter table "public"."sapristi_informations"
  add constraint "sapristi_informations_id_key" UNIQUE using index "sapristi_informations_id_key";

alter table "public"."user_profiles"
  add constraint "user_profiles_sapristi_information_fkey" FOREIGN KEY (sapristi_information_id) REFERENCES sapristi_informations (id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."user_profiles"
  validate constraint "user_profiles_sapristi_information_fkey";

alter table "public"."user_profiles"
  add constraint "user_profiles_sapristi_information_key" UNIQUE using index "user_profiles_sapristi_information_key";


create policy "Enable insert for sapristi_informations based on user_id"
  on "public"."sapristi_informations"
  as permissive
  for insert
  to authenticated
  with check ((sapristi_informations.id = (SELECT user_profiles.sapristi_information_id
                                           FROM user_profiles
                                           WHERE (user_profiles.user_id = auth.uid()))));


create policy "Enable read access for all users"
  on "public"."sapristi_informations"
  as permissive
  for select
  to public
  using (true);


create policy "Enable update for sapristi_informations based on user_id"
  on "public"."sapristi_informations"
  as permissive
  for update
  to authenticated
  using ((sapristi_informations.id = (SELECT user_profiles.sapristi_information_id
                                      FROM user_profiles
                                      WHERE (user_profiles.user_id = auth.uid()))));

create policy "Enable delete for sapristi_informations based on user_id"
  on "public"."sapristi_informations"
  as permissive
  for delete
  to authenticated
  using ((sapristi_informations.id = (SELECT user_profiles.student_information_id
                                      FROM user_profiles
                                      WHERE (user_profiles.user_id = auth.uid()))));
