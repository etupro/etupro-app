drop policy "Enable delete for sapristi_informations based on user_id" on "public"."sapristi_informations";

drop policy "Enable insert for sapristi_informations based on user_id" on "public"."sapristi_informations";

drop policy "Enable read access for all users" on "public"."sapristi_informations";

drop policy "Enable update for sapristi_informations based on user_id" on "public"."sapristi_informations";

drop policy "Enable delete for student_informations based on user_id" on "public"."student_informations";

drop policy "Enable insert for student_informations based on user_id" on "public"."student_informations";

drop policy "Enable read access for all users" on "public"."student_informations";

drop policy "Enable update for student_informations based on user_id" on "public"."student_informations";

alter table "public"."user_profiles"
  drop constraint "user_profiles_sapristi_information_fkey";

alter table "public"."user_profiles"
  drop constraint "user_profiles_sapristi_information_key";

alter table "public"."user_profiles"
  drop constraint "user_profiles_student_information_id_fkey";

alter table "public"."user_profiles"
  drop constraint "user_profiles_student_information_id_key";

alter table "public"."sapristi_informations"
  drop constraint "sapristi_informations_id_key";

alter table "public"."student_informations"
  drop constraint "student_informations_id_key";

alter table "public"."sapristi_informations"
  drop constraint "sapristi_informations_pkey";

alter table "public"."student_informations"
  drop constraint "student_informations_pkey";

drop index if exists "public"."user_profiles_sapristi_information_key";

drop index if exists "public"."user_profiles_student_information_id_key";

drop index if exists "public"."sapristi_informations_id_key";

drop index if exists "public"."sapristi_informations_pkey";

drop index if exists "public"."student_informations_id_key";

drop index if exists "public"."student_informations_pkey";

alter table "public"."sapristi_informations"
  drop column "id";

alter table "public"."sapristi_informations"
  add column "user_profile_id" bigint generated by default as identity not null;

alter table "public"."student_informations"
  drop column "id";

alter table "public"."student_informations"
  add column "user_profile_id" bigint generated by default as identity not null;

alter table "public"."user_profiles"
  drop column "sapristi_information_id";

alter table "public"."user_profiles"
  drop column "student_information_id";

CREATE UNIQUE INDEX sapristi_informations_id_key ON public.sapristi_informations USING btree (user_profile_id);

CREATE UNIQUE INDEX sapristi_informations_pkey ON public.sapristi_informations USING btree (user_profile_id);

CREATE UNIQUE INDEX student_informations_id_key ON public.student_informations USING btree (user_profile_id);

CREATE UNIQUE INDEX student_informations_pkey ON public.student_informations USING btree (user_profile_id);

alter table "public"."sapristi_informations"
  add constraint "sapristi_informations_pkey" PRIMARY KEY using index "sapristi_informations_pkey";

alter table "public"."student_informations"
  add constraint "student_informations_pkey" PRIMARY KEY using index "student_informations_pkey";

alter table "public"."sapristi_informations"
  add constraint "sapristi_informations_user_profile_id_fkey" FOREIGN KEY (user_profile_id) REFERENCES user_profiles (id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."sapristi_informations"
  validate constraint "sapristi_informations_user_profile_id_fkey";

alter table "public"."student_informations"
  add constraint "student_informations_user_profile_id_fkey" FOREIGN KEY (user_profile_id) REFERENCES user_profiles (id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."student_informations"
  validate constraint "student_informations_user_profile_id_fkey";

alter table "public"."sapristi_informations"
  add constraint "sapristi_informations_id_key" UNIQUE using index "sapristi_informations_id_key";

alter table "public"."student_informations"
  add constraint "student_informations_id_key" UNIQUE using index "student_informations_id_key";

create policy "Enable insert for sapristi_informations based on user_id"
  on "public"."sapristi_informations"
  as permissive
  for insert
  to authenticated
  with check ((sapristi_informations.user_profile_id = (SELECT user_profiles.id
                                                        FROM user_profiles
                                                        WHERE (user_profiles.user_id = auth.uid()))));

create policy "Enable read access for sapristi_informations based on user_id"
  on "public"."sapristi_informations"
  as permissive
  for SELECT
  to authenticated
  using ((sapristi_informations.user_profile_id = (SELECT user_profiles.id
                                                   FROM user_profiles
                                                   WHERE (user_profiles.user_id = auth.uid()))));

create policy "Enable update for sapristi_informations based on user_id"
  on "public"."sapristi_informations"
  as permissive
  for update
  to authenticated
  using ((sapristi_informations.user_profile_id = (SELECT user_profiles.id
                                                   FROM user_profiles
                                                   WHERE (user_profiles.user_id = auth.uid()))));

create policy "Enable delete for sapristi_informations based on user_id"
  on "public"."sapristi_informations"
  as permissive
  for delete
  to authenticated
  using ((sapristi_informations.user_profile_id = (SELECT user_profiles.id
                                                   FROM user_profiles
                                                   WHERE (user_profiles.user_id = auth.uid()))));


create policy "Enable insert for student_informations based on user_id"
  on "public"."student_informations"
  as permissive
  for insert
  to authenticated
  with check ((user_profile_id = (SELECT user_profiles.id
                                  FROM user_profiles
                                  WHERE (user_profiles.user_id = auth.uid()))));

create policy "Enable read access for student_informations based on user_id"
  on "public"."student_informations"
  as permissive
  for SELECT
  to authenticated
  using ((student_informations.user_profile_id = (SELECT user_profiles.id
                                                  FROM user_profiles
                                                  WHERE (user_profiles.user_id = auth.uid()))));

create policy "Enable update for student_informations based on user_id"
  on "public"."student_informations"
  as permissive
  for update
  to authenticated
  using ((student_informations.user_profile_id = (SELECT user_profiles.id
                                                  FROM user_profiles
                                                  WHERE (user_profiles.user_id = auth.uid()))));

create policy "Enable delete for student_informations based on user_id"
  on "public"."student_informations"
  as permissive
  for delete
  to authenticated
  using ((student_informations.user_profile_id = (SELECT user_profiles.id
                                                  FROM user_profiles
                                                  WHERE (user_profiles.user_id = auth.uid()))));

create policy "Admin select"
  on "public"."student_informations"
  as permissive
  for select
  to authenticated
  using (('SUPER_ADMIN'::roles = (SELECT user_profiles.role
                                  FROM user_profiles
                                  WHERE (user_profiles.user_id = auth.uid()))));

create policy "Admin select"
  on "public"."sapristi_informations"
  as permissive
  for select
  to authenticated
  using (('SUPER_ADMIN'::roles = (SELECT user_profiles.role
                                  FROM user_profiles
                                  WHERE (user_profiles.user_id = auth.uid()))));

create policy "Admin insert"
  on "public"."sapristi_informations"
  as permissive
  for insert
  to authenticated
  with check (('SUPER_ADMIN'::roles = (SELECT user_profiles.role
                                       FROM user_profiles
                                       WHERE (user_profiles.user_id = auth.uid()))));


create policy "Admin update"
  on "public"."sapristi_informations"
  as permissive
  for update
  to authenticated
  using (('SUPER_ADMIN'::roles = (SELECT user_profiles.role
                                  FROM user_profiles
                                  WHERE (user_profiles.user_id = auth.uid()))));


create policy "Admin delete"
  on "public"."sapristi_informations"
  as permissive
  for delete
  to authenticated
  using (('SUPER_ADMIN'::roles = (SELECT user_profiles.role
                                  FROM user_profiles
                                  WHERE (user_profiles.user_id = auth.uid()))));
